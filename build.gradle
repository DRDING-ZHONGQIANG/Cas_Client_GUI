import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    ext {
        springBootVersion = '2.1.0.BUILD-SNAPSHOT'
    }

    repositories {
        jcenter()
        maven { url 'https://repo.spring.io/snapshot' }
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

plugins {
    id "com.zoltu.git-versioning" version "3.0.3"
    id 'pl.allegro.tech.build.axion-release' version '1.5.0'
    id "de.undercouch.download" version "3.4.2"
    id "com.avast.gradle.docker-compose" version "0.7.1"
    id "com.markklim.plugins.mfc" version "0.1.23"
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: "io.spring.dependency-management"
apply plugin: 'jacoco'
apply plugin: 'com.google.osdetector'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ZoltuGitVersioning {
    customDescribeProcessor { describeResults ->
        def matcher = (describeResults =~ /[0-9A-Za-z.\-]*([0-9]+?)\.([0-9]+?)\.([0-9]+?)(?:-([0-9A-Za-z.\-]+))?-([0-9]+?)-g([a-zA-Z0-9]+)/)
        matcher.matches()
        [
                major      : matcher.group(1),
                minor      : matcher.group(2),
                patch      : matcher.group(3),
                tags       : matcher.group(4),
                commitCount: matcher.group(5),
                sha        : matcher.group(6),
        ]
    }
}

ext {
    buildNumber = System.getenv().BUILD_NUMBER
    versionInfo = ZoltuGitVersioning.versionInfo
    currentDate = DateTimeFormatter.ISO_LOCAL_DATE.format(LocalDateTime.now())
    versionProperties = [
            version    : version,
            buildNumber: buildNumber ?: 'dev',
            commitHash : versionInfo.sha,
            buildDate  : currentDate
    ]

    isOsLinux = System.getProperty('os.name').toLowerCase().contains('linux')
    platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

    dockerComposeCacheDir = "$rootDir/.gradle/docker-compose"
    dockerComposeScript = isOsLinux ? "$dockerComposeCacheDir/$dockerComposeVersion/docker-compose.sh"
            : "$dockerComposeCacheDir/$dockerComposeVersion/docker-compose.exe"
    dockerComposeCommand = project.hasProperty('dockerComposeVersion') ?
            dockerComposeScript : 'docker-compose'

    composeProperties = [
            'version': project.version,
    ]

    jsr305Version = "3.0.1"
    lombokVersion = "edge-SNAPSHOT"
    javaFxVersion = "11"
    moduleName = 'com.github.kindrat.cassadra.client'
    javaHome = System.getProperty("java.home")
}

repositories {
    jcenter()
    maven { url 'https://projectlombok.org/edge-releases' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion") {
            bomProperty 'reactor-bom.version', 'Bismuth-SR8'
        }
    }
    dependencies {
        dependency("org.apache.commons:commons-lang3:3.8.1")
        dependency("io.projectreactor:reactor-core:3.0.7.RELEASE")
        dependency("io.projectreactor.addons:reactor-test:3.0.6.RELEASE")

        // overrides
        dependency("org.assertj:assertj-core:3.6.1")
        // cassandra driver depends on old guava futures
        dependency("com.google.guava:guava:19.0")
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.openjfx:javafx-base:$javaFxVersion:$platform")
    compile("org.openjfx:javafx-controls:$javaFxVersion:$platform")
    compile("org.openjfx:javafx-graphics:$javaFxVersion:$platform")
    compile("org.openjfx:javafx-fxml:$javaFxVersion:$platform")
    compile("com.google.guava:guava")
    compile("com.github.nginate:commons-lang:1.0.0")
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("org.hibernate:hibernate-core")

    compile("org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:2.0.0.Alpha1")

    runtime("org.springframework.boot:spring-boot-properties-migrator")

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    implementation("org.projectlombok:lombok:$lombokVersion")

    compile("com.datastax.cassandra:cassandra-driver-core:3.1.3")
    compile("org.springframework.data:spring-data-cassandra") {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    runtime("org.codehaus.janino:janino")

    testCompile("org.springframework.boot:spring-boot-starter-data-cassandra")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.testng:testng:6.14.3")
}

scmVersion {
    versionIncrementer 'incrementMinorIfNotOnRelease', [releaseBranchPattern: 'release-.*']
}

wrapper {
    gradleVersion = '4.10.1'
    distributionType = "all"
}

run {
    systemProperties System.properties
    mainClassName = 'com.github.kindrat.cassandra.client.CassandraClientGUI'

    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml,spring.boot'
        ]
    }
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
        attributes('Main-Class': 'com.github.kindrat.cassandra.client.CassandraClientGUI')
    }
}

compileJava {
    inputs.property("moduleName", moduleName)

    options.encoding = 'UTF-8'

    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'spring.boot',
                "-Xlint:unchecked",
                "-Xlint:deprecation"
        ]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'junit',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

task downloadDockerCompose(type: Download) {
    def composeVersion = project.findProperty('dockerComposeVersion')
    def composeSrc = isOsLinux ? "https://github.com/docker/compose/releases/download/$composeVersion/docker-compose-linux-x86_64"
            : "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Windows-x86_64.exe"
    inputs.property('composeVersion', composeVersion)

    overwrite false
    src composeSrc
    dest dockerComposeScript

    onlyIf { composeVersion != null }

    doFirst { delete(dockerComposeCacheDir) }
    doLast { file(dockerComposeScript).executable = true }
}

task prepareDockerFiles(type: Sync, group: 'docker') {
    inputs.properties composeProperties
    from("docker-compose") {
        filter(ReplaceTokens, tokens: composeProperties)
    }
    into "$buildDir/docker-compose"
}

dockerCompose.env {
    projectName = dockerComposeProject
    dockerComposeWorkingDirectory = "$buildDir/docker-compose"
    useComposeFiles = ['docker-compose.yml']
    executable = dockerComposeCommand
    removeVolumes = true
    waitForTcpPorts = true
}

envComposePull {
    group = 'docker'
    dependsOn ":downloadDockerCompose", prepareDockerFiles
}

envComposeDown {
    group = 'docker'
    dependsOn ":downloadDockerCompose", prepareDockerFiles
}

envComposeUp {
    group = 'docker'
    dependsOn ":downloadDockerCompose", prepareDockerFiles
}

migrator {
    host = "127.0.0.1"
    port = 19042
    keyspace = "test"
    script = "${rootDir}/init_cassandra.cql"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn test
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    sourceSets sourceSets.main

    reports {
        xml.setEnabled(true)
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.setEnabled(false)
        csv.setEnabled(false)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    inputs.property("moduleName", moduleName)

    useTestNG()
    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
        stackTraceFilters = []
        showStandardStreams = true
    }
    systemProperties System.properties
    systemProperty 'user.dir', workingDir
    systemProperty 'functional.logDir', "${project.buildDir}/test-reports/container-logs"
    //Mac OS default TMPDIR env variable points to folder which is not mounted to Docker VM,
    //this fixes mounting temporary files/folders to containers
    if (Os.isFamily(Os.FAMILY_MAC)) {
        systemProperty 'java.io.tmpdir', "/tmp"
    }

    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
}

task link(type: Exec) {
    dependsOn 'clean'
    dependsOn 'jar'

    workingDir 'build'

    commandLine "${ javaHome}${File.separatorChar}bin${File.separatorChar}jlink", '--module-path', "libs${File.pathSeparatorChar}${javaHome}${File.separatorChar}jmods",
            '--add-modules', "$moduleName", '--launcher', 'cassadra.client=com.github.kindrat.cassadra.client/com.github.kindrat.cassadra.client.CassandraClientGUI', 
            '--output', 'dist', '--strip-debug',
            '--compress', '2', '--no-header-files', '--no-man-pages'
}

migratorDropKeyspace.dependsOn envComposeUp
migratorExecute.dependsOn envComposeUp

test.dependsOn migratorExecute
test.finalizedBy envComposeDown
